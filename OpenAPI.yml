openapi: '3.0.2'
info:
  title: Capstone Project Group 1
  description: Website for transaction 
  termsOfService: http://richap.space/terms/
  contact:
    name: capsie
    url: http://richap.space/support
    email: fidi.breaker@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0.0'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/mufidi-a/capstone-group-1/1.0.0
    variables:
      environment: 
        default: dev
        enum:
          - "prod"
          - "dev"
tags:
  - name: Auth
    description: Authentication
  - name: Users
    description: User control
      
paths:
  /login:
    post:
      tags:
        - Auth
      summary: login user
      description: Login user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestLogin'
            examples:
              userData1:
                description: "Example data user"
                value: {
                  email: "anu@mail.com",
                  password: "1234"
                }
              userData2:
                description: "Example data user"
                value: {
                  email: "nada@mail.com",
                  password: "4321"
                }
      responses:
        '200':
          $ref: '#/components/responses/loginSuccess'
        '400':
          $ref: '#/components/responses/loginFailed'
  ####################################
  #  USERS
  ####################################
  /register:
    post:
      tags:
        - Users
      summary: register
      description: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUserData'
            examples:
              userData1:
                description: "Example data user"
                value: {
                  name: "Anu",
                  email: "anu@mail.com",
                  password: "1234",
                }
              userData2:
                description: "Example data user"
                value: {
                  name: "Nada",
                  email: "nada@mail.com",
                  password: "4321",
                }
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
  /users:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Get current user profile
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getMyProfileSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get User by ID
      description: Get User by ID
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id user
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          $ref: '#/components/responses/getUserProfileSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
    put:
      tags:
        - Users
      summary: Edit User by ID
      description: Edit user profile
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id user
          in: path
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          multipartform:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Una
                email:
                  type: string
                  example: una@mail.com
                password:
                  type: string
                  example: inipasswordbaru
                image:
                  type: string
                  example: anuan.jpg
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
    delete:
      tags:
        - Users
      summary: Delete User by ID
      description: Delete User by ID
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id user
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
#==================================#
#    COMPONENT
#==================================#
components:

  #==================================#    
  #    JWT
  #==================================#
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  #==================================#
  #    SCHEMAS
  #==================================#
  schemas:
    requestLogin:
      type: object
      properties:
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1  
    requestUserData:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
        "image":
          type: string
          minLength: 1
    failedResponse:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        },
      }    
    responseLoginSuccess:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }
    #==================================#
    #    RESPONSE FOR GENERAL REQUEST
    #==================================#
  responses:
    responseSuccess:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
    responseFailed:
      description: Failed Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: Bad Request
    #==================================#
    #    RESPONSE FOR LOGIN USER
    #==================================#
    loginSuccess:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Login Success
              token: 
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
    loginFailed:
      description: Failed Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: Login Failed, wrong email or password

    #==================================#
    #    RESPONSE GET USER PROFILE
    #==================================#
    getUserProfileSuccess:
      description: success get user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
                example: 1
              name:
                type: string
                example: Anu 
              email:
                type: string
                example: anu@mail.com
              password:
                type: string
                example: "1234"
              image_url:
                type: string
                example: "https://capstoneprojectgroup1.s3.ap-southeast-3.amazonaws.com/user/user_6.png"
    #==================================#
    # RESPONSE GET CURRENT USER PROFILE
    #==================================#   
    getMyProfileSuccess:
      description: success get user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
                example: 1
              name:
                type: string
                example: Anu 
              email:
                type: string
                example: anu@mail.com
              password:
                type: string
                example: "1234"
              image_url:
                type: string
                example: "https://capstoneprojectgroup1.s3.ap-southeast-3.amazonaws.com/user/user_6.png"